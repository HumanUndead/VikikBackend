
@{
    Layout = null;
}
<!DOCTYPE html>
<html xmlns:ng="http://angularjs.org" lang="en" id="ti-app" ng-csp="no-inline-style" ng-controller="TiAppController">
<head>
    <title>
        @ViewBag.Title
    </title>
    <link rel="shortcut icon " href="~/assets/images/raptor/core/favicon.ico " type="image/x-icon " />
    <link rel="icon " href="~/wsimages/fav.png" type="image/png " />
    <script src="~/assets/js/modernizr.custom.js"></script>
    <link href="~/assets/css/bootstrap.min.css" rel="stylesheet" />


    <link rel="stylesheet " type="text/css " href="~/assets/css/main.css" />
    <link href="~/assets/css/font-awesome.min.css" rel="stylesheet" />


    <link href="~/assets/css/animate.css" rel="stylesheet" />
    <link href="~/assets/css/normalize.css" rel="stylesheet" />
    <link href="~/assets/css/styles.css" rel="stylesheet" />

    <!-- ================================================= Owl Carousel ==================================== -->
    <link href="~/assets/css/owl.carousel.css" rel="stylesheet" />
    <link href="~/assets/css/owl.theme.default.css" rel="stylesheet" />
    <style>
        .coming-soon-text {
            position: absolute;
            top: 50%;
            left: 41%;
            display: inline-block;
            line-height: 23;
            height: auto;
        }

            .coming-soon-text p {
                font-size: 50px;
                font-family: proxima nova bold;
                text-transform: uppercase;
                line-height: 1;
                margin: 0;
            }
    </style>
    <link href="~/assets/css/main.css" rel="stylesheet" />
</head>

<body style="overflow:hidden;position:relative">
    <main class="main-section">

        <div id="page p-t-0" class="container1">
            <div class="mrs-v51 pos-relative" style="    min-height: 115vh;">
                <div id="mrs-brid-canvas"></div>
            </div>
        </div>
        <div class="coming-soon-text">
            <p>Coming Soon</p>
        </div>
    </main>

    <script type="text/javascript" src="~/assets/js/three.min.js"></script>
    <script type="text/javascript" src="~/assets/js/Projector.js"></script>
    <script type="text/javascript" src="~/assets/js/CanvasRenderer.js"></script>
    <script type="text/javascript" src="~/assets/js/Bird.js"></script>
    <script>
        function init() {
            container = document.getElementById("mrs-brid-canvas"), document.body.appendChild(container), camera = new THREE.PerspectiveCamera(75, SCREEN_WIDTH / SCREEN_HEIGHT, 1, 1e4), camera.position.z = 450, scene = new THREE.Scene, birds = [], boids = [];
            for (var i = 0; 30 > i; i++) boid = boids[i] = new Boid, boid.position.x = 400 * Math.random() - 200, boid.position.y = 400 * Math.random() - 200, boid.position.z = 400 * Math.random() - 200, boid.velocity.x = 2 * Math.random() - 1, boid.velocity.y = 2 * Math.random() - 1, boid.velocity.z = 2 * Math.random() - 1, boid.setAvoidWalls(!0), boid.setWorldSize(500, 500, 400), bird = birds[i] = new THREE.Mesh(new Bird, new THREE.MeshBasicMaterial({
                color: 16777215 * Math.random(),
                side: THREE.DoubleSide
            })), bird.phase = Math.floor(62.83 * Math.random()), scene.add(bird);
            renderer = new THREE.CanvasRenderer({
                alpha: !0
            }), renderer.setClearColor(16777215, 0), renderer.setSize(container.offsetWidth, container.offsetHeight), container.appendChild(renderer.domElement), window.addEventListener("resize", onWindowResize, !1)
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight, camera.updateProjectionMatrix(), renderer.setSize(window.innerWidth, window.innerHeight)
        }

        function onDocumentMouseMove(i) {
            for (var t = new THREE.Vector3(i.clientX - SCREEN_WIDTH_HALF, -i.clientY + SCREEN_HEIGHT_HALF, 0), o = 0, e = boids.length; e > o; o++) boid = boids[o], t.z = boid.position.z, boid.repulse(t)
        }

        function animate() {
            requestAnimationFrame(animate), render()
        }

        function render() {
            for (var i = 0, t = birds.length; t > i; i++) boid = boids[i], boid.run(boids), bird = birds[i], bird.position.copy(boids[i].position), color = bird.material.color, color.r = color.g = color.b = 13369344, bird.rotation.y = Math.atan2(-boid.velocity.z, boid.velocity.x), bird.rotation.z = Math.asin(boid.velocity.y / boid.velocity.length()), bird.phase = (bird.phase + (Math.max(0, bird.rotation.z) + .1)) % 62.83, bird.geometry.vertices[5].y = bird.geometry.vertices[4].y = 5 * Math.sin(bird.phase);
            renderer.render(scene, camera)
        }
        var Boid = function () {
            var i, t, o = new THREE.Vector3,
                e = 500,
                n = 500,
                s = 200,
                r = 100,
                a = 4,
                d = .1,
                c = !1;
            this.position = new THREE.Vector3, this.velocity = new THREE.Vector3, i = new THREE.Vector3, this.setGoal = function (i) {
                t = i
            }, this.setAvoidWalls = function (i) {
                c = i
            }, this.setWorldSize = function (i, t, o) {
                e = i, n = t, s = o
            }, this.run = function (t) {
                c && (o.set(-e, this.position.y, this.position.z), o = this.avoid(o), o.multiplyScalar(5), i.add(o), o.set(e, this.position.y, this.position.z), o = this.avoid(o), o.multiplyScalar(5), i.add(o), o.set(this.position.x, -n, this.position.z), o = this.avoid(o), o.multiplyScalar(5), i.add(o), o.set(this.position.x, n, this.position.z), o = this.avoid(o), o.multiplyScalar(5), i.add(o), o.set(this.position.x, this.position.y, -s), o = this.avoid(o), o.multiplyScalar(5), i.add(o), o.set(this.position.x, this.position.y, s), o = this.avoid(o), o.multiplyScalar(5), i.add(o)), Math.random() > .5 && this.flock(t), this.move()
            }, this.flock = function (o) {
                t && i.add(this.reach(t, .005)), i.add(this.alignment(o)), i.add(this.cohesion(o)), i.add(this.separation(o))
            }, this.move = function () {
                this.velocity.add(i);
                var t = this.velocity.length();
                t > a && this.velocity.divideScalar(t / a), this.position.add(this.velocity), i.set(0, 0, 0)
            }, this.checkBounds = function () {
                this.position.x > e && (this.position.x = -e), this.position.x < -e && (this.position.x = e), this.position.y > n && (this.position.y = -n), this.position.y < -n && (this.position.y = n), this.position.z > s && (this.position.z = -s), this.position.z < -s && (this.position.z = s)
            }, this.avoid = function (i) {
                var t = new THREE.Vector3;
                return t.copy(this.position), t.sub(i), t.multiplyScalar(1 / this.position.distanceToSquared(i)), t
            }, this.repulse = function (t) {
                var o = this.position.distanceTo(t);
                if (150 > o) {
                    var e = new THREE.Vector3;
                    e.subVectors(this.position, t), e.multiplyScalar(.5 / o), i.add(e)
                }
            }, this.reach = function (i, t) {
                var o = new THREE.Vector3;
                return o.subVectors(i, this.position), o.multiplyScalar(t), o
            }, this.alignment = function (i) {
                for (var t, o = new THREE.Vector3, e = 0, n = 0, s = i.length; s > n; n++) Math.random() > .6 || (t = i[n], distance = t.position.distanceTo(this.position), distance > 0 && distance <= r && (o.add(t.velocity), e++));
                if (e > 0) {
                    o.divideScalar(e);
                    var a = o.length();
                    a > d && o.divideScalar(a / d)
                }
                return o
            }, this.cohesion = function (i) {
                for (var t, o, e = new THREE.Vector3, n = new THREE.Vector3, s = 0, a = 0, c = i.length; c > a; a++) Math.random() > .6 || (t = i[a], o = t.position.distanceTo(this.position), o > 0 && r >= o && (e.add(t.position), s++));
                s > 0 && e.divideScalar(s), n.subVectors(e, this.position);
                var h = n.length();
                return h > d && n.divideScalar(h / d), n
            }, this.separation = function (i) {
                for (var t, o, e = new THREE.Vector3, n = new THREE.Vector3, s = 0, a = i.length; a > s; s++) Math.random() > .6 || (t = i[s], o = t.position.distanceTo(this.position), o > 0 && r >= o && (n.subVectors(this.position, t.position), n.normalize(), n.divideScalar(o), e.add(n)));
                return e
            }
        },
            SCREEN_WIDTH = window.innerWidth,
            SCREEN_HEIGHT = window.innerHeight,
            SCREEN_WIDTH_HALF = SCREEN_WIDTH / 2,
            SCREEN_HEIGHT_HALF = SCREEN_HEIGHT / 2,
            camera, scene, renderer, birds, bird, boid, boids, stats;
        init(), animate();
    </script>
</body>
</html>